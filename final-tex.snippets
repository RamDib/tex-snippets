#
# My LaTeX Snippets
#

# Context Functions Definition

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def notmath():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'


def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal


# Document Template

snippet template "LaTeX Document Template" b
\documentclass[a4paper]{article}

% PACKAGES
\usepackage[T1]{fontenc}
\usepackage{amsmath, amsfonts, amssymb}
\usepackage{geometry}
\usepackage{graphicx}
\usepackage{parskip}
\usepackage{tcolorbox}

% THEOREMS
\newtcolorbox{theorem}[1]{
    colback=brown!5!white,
    colframe=brown!50!black,
    fonttitle=\bfseries, 
    title={Theorem. #1}
}
\newtcolorbox{definition}[1]{
    colback=gray!5!white,
    colframe=gray!35!black,
    fonttitle=\bfseries, 
    title={Definition. #1},
    parbox=false
}
\newtcolorbox{example}{
    colback=blue!5!white,
    colframe=blue!35!black,
    fonttitle=\bfseries, 
    title={Example.},
    parbox=false
}
\newtcolorbox{proof}{
    arc=0pt,
    outer arc=0pt,
    leftrule=0pt,
    rightrule=0pt,
    bottomrule=0pt,
    colback=gray!5!white,
    colframe=white!60!black,
    fonttitle=\bfseries, 
    title={Proof.},
    parbox=false
}
\AtEndEnvironment{proof}{\null\hfill{$\square$}}

% TITLE
\title{$1}
\author{Ramiro Dibur}
\date{\today}

\begin{document}
    \maketitle

    $0
\end{document}
endsnippet


# Document Structure

context "notmath()"
snippet section "\section{...}" b
\section{$1}

$0
endsnippet

context "notmath()"
snippet *section "\section*{...}" b
\section*{$1}

$0
endsnippet

context "notmath()"
snippet subsection "\subsection{...}" b
\subsection{$1}

$0
endsnippet

context "notmath()"
snippet *subsection "\subsection*{...}" b
\subsection*{$1}

$0
endsnippet

context "notmath()"
snippet subsubsection "\subsubsection{...}" b
\subsubsection{$1}

$0
endsnippet

context "notmath()"
snippet *subsubsection "\subsubsection*{...}" b
\subsubsection*{$1}

$0
endsnippet


# Text Environments

context "notmath()"
snippet beg "\begin{...} / \end{...}" b 
\begin{$1}
    $0
\end{$1}
endsnippet

context "notmath()"
snippet enum "\begin{enumerate} ... \end{enumerate}" b
\begin{enumerate}
    \item $0
\end{enumerate}
endsnippet

context "notmath()"
snippet item "\begin{itemize} ... \end{enumerate}" b
\begin{itemize}
    \item $0
\end{itemize}
endsnippet

context "notmath()"
snippet desc "\begin{description} ... \end{enumerate}" b
\begin{description}
    \item[$1] $0
\end{description}
endsnippet


# Theorem-like Environments

context "notmath()"
snippet thm "\begin{theorem} ... \end{enumerate}" bA
\begin{theorem}{$1}
    $0
\end{theorem}
endsnippet

context "notmath()"
snippet def "\begin{definition} ... \end{enumerate}" bA
\begin{definition}{$1}
    $0
\end{definition}
endsnippet

context "notmath()"
snippet exmp "\begin{example} ... \end{enumerate}" bA
\begin{example}
    $0
\end{example}
endsnippet

context "notmath()"
snippet def "\begin{proof} ... \end{enumerate}" bA
\begin{proof}
    $0
\end{proof}
endsnippet


# References

context "notmath()"
snippet label "\label{sec:item}" b
\label{${1:sec}:${2:item}}
$0
endsnippet

context "notmath()"
snippet ref "\ref{sec:item}" i
\ref{${1:sec}:${2:item}}
$0
endsnippet

context "notmath()"
snippet footnote "\footnote{...}" i
\footnote{$1} $0
endsnippet


# Text Fonts

context "notmath()"
snippet bold "\textbf{...}" 
\textbf{${1:${VISUAL}}}$0
endsnippet

context "notmath()"
snippet ital "\textit{...}" 
\textit{${1:${VISUAL}}}$0
endsnippet

context "notmath()"
snippet underline "\underline{...}" 
\underline{${1:${VISUAL}}}$0
endsnippet


# Math Environment

context "notmath()"
snippet mk "Inline Math" wA
\( ${1:${VISUAL}} \)$0
endsnippet

context "notmath()"
snippet dm "Math" wA
\[
    ${1:${VISUAL}}
\]
$0
endsnippet

context "notmath()"
snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
$0
endsnippet


# Math Mode Accents

context "math()"
snippet bar "Bar" i
\bar{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet vec "Vec" i
\vec{${1:${VISUAL}}} $0
endsnippet


# Greek Letters

context "math()"
snippet alpha "\alpha" eA
\alpha
endsnippet

context "math()"
snippet beta "\beta" eA
\beta
endsnippet

context "math()"
snippet gamma "\gamma" eA
\gamma
endsnippet

context "math()"
snippet delta "\delta" eA
\delta
endsnippet

context "math()"
snippet epsilon "\epsilon" eA
\epsilon
endsnippet

context "math()"
snippet varepsilon "\varepsilon" eA
\varepsilon
endsnippet

context "math()"
snippet zeta "\zeta" eA
\zeta
endsnippet

context "math()"
snippet eta "\eta" eA
\eta
endsnippet

context "math()"
snippet Gamma "\Gamma" eA
\Gamma
endsnippet

context "math()"
snippet Delta "\Delta" eA
\Delta
endsnippet

context "math()"
snippet Theta "\Theta" eA
\Theta
endsnippet

context "math()"
snippet theta "\theta" eA
\theta
endsnippet

context "math()"
snippet iota "\iota" eA
\iota
endsnippet

context "math()"
snippet kappa "\kappa" eA
\kappa
endsnippet

context "math()"
snippet lambda "\lambda" eA
\lambda
endsnippet

context "math()"
snippet mu "\mu" eA
\mu
endsnippet

context "math()"
snippet nu "\nu" eA
\nu
endsnippet

context "math()"
snippet xi "\xi" eA
\xi
endsnippet

context "math()"
snippet rho "\rho" eA
\rho
endsnippet

context "math()"
snippet sigma "\sigma" eA
\sigma
endsnippet

context "math()"
snippet upsilon "\upsilon" eA
\upsilon
endsnippet

context "math()"
snippet phi "\phi" eA
\phi
endsnippet

context "math()"
snippet varphi "\varphi" eA
\varphi
endsnippet

context "math()"
snippet chi "\chi" eA
\chi
endsnippet

context "math()"
snippet omega "\omega" eA
\omega
endsnippet

context "math()"
snippet Omega "\Omega" eA
\Omega
endsnippet


# Binart Relations

context "math()"
snippet <= "Less than or equal" eA 
\leq
endsnippet

context "math()"
snippet >= "Greater than or equal" eA 
\geq
endsnippet

context "math()"
snippet equiv "\equiv" eA
\equiv
endsnippet

context "math()"
snippet subset "\subset" eA
\subset
endsnippet

context "math()"
snippet supset "\supset" eA
\supset
endsnippet

context "math()"
snippet approx "\approx" eA
\approx
endsnippet

context "math()"
snippet cong "\cong" eA
\cong
endsnippet

context "math()"
snippet inn "\in" eA
\in
endsnippet


# Binary Operators

context "math()"
snippet pm "\pm" e
\pm
endsnippet

context "math()"
snippet mp "\mp" e
\mp
endsnippet

context "math()"
snippet cdot "\cdot" eA
\cdot
endsnippet

context "math()"
snippet times "\times" eA
\times
endsnippet

context "math()"
snippet setminus "\setminus" eA
\setminus
endsnippet

context "math()"
snippet cup "\cup" eA
\cup
endsnippet

context "math()"
snippet cap "\cap" eA
\cap
endsnippet

context "math()"
snippet circ "\circ" eA
\circ
endsnippet

context "math()"
snippet lor "\lor" eA
\lor
endsnippet

context "math()"
snippet land "\land" eA
\land
endsnippet

context "math()"
snippet oplus "\oplus" eA
\oplus
endsnippet

context "math()"
snippet otimes "\otimes" eA
\otimes
endsnippet


# BIG Operators

context "math()"
snippet sum "\sum" eA
\sum
endsnippet

context "math()"
snippet bigcup "\bigcup" eA
\bigcup
endsnippet

context "math()"
snippet bigcap "\bigcap" eA
\bigcap
endsnippet

context "math()"
snippet prod "\prod" eA
\prod
endsnippet

context "math()"
snippet int "\int" eA
\int
endsnippet

context "math()"
snippet iint "\iint" eA
\iint
endsnippet

context "math()"
snippet iiint "\iiint" eA
\iiint
endsnippet

context "math()"
snippet oint "\oint" eA
\oint
endsnippet


# Arrows

context "math()"
snippet gets "\gets" eA
\gets
endsnippet

context "math()"
snippet to "\to" eA
\to
endsnippet

context "math()"
snippet implies "\implies" eA
\implies
endsnippet

context "math()"
snippet impliedby "\impliedby" eA
\impliedby
endsnippet

context "math()"
snippet mapsto "\mapsto" eA
\mapsto
endsnippet

context "math()"
snippet iff "\iff" eA
\iff
endsnippet


# Delimeters

context "math()"
snippet () "left( right)" eA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" eA
\left<${1:${VISUAL}} \right>$0
endsnippet


# Miscellaneous Symbols

context "math()"
snippet ... "\dots" eA
\dots
endsnippet

context "math()"
snippet forall "\forall" eA
\forall
endsnippet

context "math()"
snippet exists "\exists" eA
\exists
endsnippet

context "math()"
snippet not "\not" eA
\not
endsnippet

context "math()"
snippet inf "\infty" eA
\infty
endsnippet

context "math()"
snippet lnot "\lnot" eA
\lnot
endsnippet


# Fractions

context "math()"
snippet // "Fraction" eA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


# Subscript

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet __ "subscript" eA
_{$1}$0
endsnippet


# Matrices

context "math()"
snippet pmat "pmat" eA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "math()"
snippet bmat "bmat" eA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet


# Surds and Exponents

context "math()"
snippet sq "\sqrt{}" eA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" eA
^2
endsnippet

context "math()"
snippet cb "^3" eA
^3
endsnippet

context "math()"
snippet td "to the ... power" eA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" eA
^{($1)}$0
endsnippet


# Commonly Used Snippets

context "math()"
snippet dint "Definite Integral" eA
\int_{${1:0}}^{${2:\infty}} ${3:${VISUAL}} \, d$4 $0
endsnippet

context "math()"
snippet dsum "Definite Sum" eA
\sum_{${1:n} = ${2:0}}^{${3:\infty}} $4 $0
endsnippet

context "math()"
snippet lim "\lim" eA
\lim
endsnippet

context "math()"
snippet dlim "Defined Lim" eA
\lim_{${1:n} \to ${2:\infty}} ${3:${VISUAL}} $0
endsnippet


# Math Fonts

context "math()"
snippet mbb "Math Blackboard-Bold" eA
\mathbb{${1:${VISUAL}}}
endsnippet

context "math()"
snippet mbf "Math Bold-Font" eA
\mathbf{${1:${VISUAL}}}
endsnippet

context "math()"
snippet mrm "Math Roman Font" eA
\mathrm{${1:${VISUAL}}}
endsnippet

context "math()"
snippet txt "Normal Text" eA
\text{${1:${VISUAL}}}
endsnippet


# Log-like Functions

context "math()"
snippet sin "\sin" iA
\sin
endsnippet

context "math()"
snippet cos "\cos" iA
\cos
endsnippet

context "math()"
snippet tan "\tan" iA
\tan
endsnippet

context "math()"
snippet sec "\sec" iA
\sec
endsnippet

context "math()"
snippet csc "\csc" iA
\csc
endsnippet

context "math()"
snippet cot "\cot" iA
\cot
endsnippet

context "math()"
snippet exp "\exp" iA
\exp
endsnippet

context "math()"
snippet log "\log" iA
\log
endsnippet

context "math()"
snippet min "\min" iA
\min
endsnippet

context "math()"
snippet max "\max" iA
\max
endsnippet

context "math()"
snippet inf "\inf" iA
\inf
endsnippet

context "math()"
snippet supr "\sup" iA
\sup
endsnippet

context "math()"
snippet arg "\arg" iA
\arg
endsnippet

context "math()"
snippet ker "\ker" iA
\ker
endsnippet

context "math()"
snippet dim "\dim" iA
\dim
endsnippet

context "math()"
snippet det "\det" iA
\det
endsnippet

